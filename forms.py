# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'forms.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from algebry.structures import Matrix, Vector
from algebry.systems import SLAR

from PyQt5.QtCore import Qt

class NonEditableTableModle(QtCore.QAbstractTableModel):
    def __init__(self, data):
        super(NonEditableTableModle, self).__init__()
        self._data = data

    def data(self, index, role):
        if role == Qt.DisplayRole:
            # See below for the nested-list data structure.
            # .row() indexes into the outer list,
            # .column() indexes into the sub-list
            return self._data[index.row()][index.column()]

    def rowCount(self, index):
        # The length of the outer list.
        return len(self._data)

    def columnCount(self, index):
        # The following takes the first sub-list, and returns
        # the length (only works if all rows are an equal length)
        return len(self._data[0])

class TableModel(QtCore.QAbstractTableModel):
    def __init__(self, data):
        super(TableModel, self).__init__()
        self._data = data

    def data(self, index, role):
        if role == Qt.DisplayRole:
            # See below for the nested-list data structure.
            # .row() indexes into the outer list,
            # .column() indexes into the sub-list
            return self._data[index.row()][index.column()]

    def setData(self, index, value, role):
        try:
            value = int(value)
        except Exception as err:
            msg_box = QtWidgets.QMessageBox()
            msg_box.setIcon(QtWidgets.QMessageBox.Critical)
            msg_box.setText('must be integer')
            msg_box.setStandardButtons(QtWidgets.QMessageBox.Ok)
            retval = msg_box.exec_()
            return
        if role == Qt.EditRole and isinstance(value, int):
            self._data[index.row()][index.column()] = value
            return True
        else:
            raise Exception('MUST BE INTEGER')

    def flags(self, index):
        return Qt.ItemIsSelectable | Qt.ItemIsEnabled | Qt.ItemIsEditable

    def rowCount(self, index):
        # The length of the outer list.
        return len(self._data)

    def columnCount(self, index):
        # The following takes the first sub-list, and returns
        # the length (only works if all rows are an equal length)
        return len(self._data[0])


class Ui_MainWindow(object):
    def __init__(self):
        super().__init__()
        self.coefs_matrix = Matrix()
        self.bs_matrix = Matrix()
        # self.xs_vector = Vector()
        self.obj = self.coefs_matrix
        self.display_obj = self.display_matrix
        # self.SLAR = SLAR()

    def display_matrix(self):
        self.model = TableModel(self.coefs_matrix.matrix)
        self.tableView.setModel(self.model)

    def display_bs_matrix(self):
        self.bs_model = TableModel(self.bs_matrix.matrix)
        self.tableView_2.setModel(self.bs_model)

    def display_matrix_view(self):
        model = TableModel(self.coefs_matrix.matrix)
        self.matrix_table_view.setModel(model)

    def display_bs_view(self):
        model = TableModel(self.bs_matrix.matrix)
        self.bs_matrix_view.setModel(model)

    def display_xs_view(self):
        model = NonEditableTableModle([[f'x{i}',] for i in range(len(self.xs_vector.vector))])
        self.xs_vector_view.setModel(model)
        self.xs_vector_view.horizontalHeader().hide()
        self.xs_vector_view.verticalHeader().hide()

    def open_slar_ui(self):
        if not hasattr(self.coefs_matrix, 'matrix') or not hasattr(self.bs_matrix, 'matrix'):
            self.display_error(ValueError('You need to have a matrix and bs matrix in order to create SLAR'))
            return
        try:
            self.xs_vector = Vector()
            self.xs_vector.ones_vector(self.coefs_matrix.columns_counter)
            self.SLAR = SLAR(self.coefs_matrix, self.xs_vector, self.bs_matrix)

            self.make_all_invisible()

            self.display_matrix_view()
            self.display_bs_view()
            self.display_xs_view()

            self.matrix_table_view.setVisible(True)
            self.bs_matrix_view.setVisible(True)
            self.xs_vector_view.setVisible(True)


        except Exception as err:
            self.display_error(err)

    def open_bs_vector_ui(self):
        self.make_all_invisible()

        self.obj = self.bs_matrix
        self.display_obj = self.display_bs_matrix

        self.pushButton_5.setVisible(True)
        self.pushButton_6.setVisible(True)
        self.pushButton_4.setVisible(True)
        self.label.setVisible(True)
        # self.label_2.setVisible(True)
        self.textEdit.setVisible(True)
        # self.textEdit_2.setVisible(True)
        self.tableView_2.setVisible(True)

    def open_coefs_matrix_ui(self):
        self.make_all_invisible()

        self.obj = self.coefs_matrix
        self.display_obj = self.display_matrix

        self.pushButton_5.setVisible(True)
        self.pushButton_6.setVisible(True)
        self.pushButton_4.setVisible(True)
        self.label.setVisible(True)
        self.label_2.setVisible(True)
        self.textEdit.setVisible(True)
        self.textEdit_2.setVisible(True)
        self.tableView.setVisible(True)

    def display_error(self, error):
        msg_box = QtWidgets.QMessageBox()
        msg_box.setIcon(QtWidgets.QMessageBox.Critical)
        msg_box.setText(str(error))
        msg_box.setStandardButtons(QtWidgets.QMessageBox.Ok)
        retval = msg_box.exec_()

    def input_from_file(self):
        try:
            dlg = QtWidgets.QFileDialog()
            dlg.setFileMode(QtWidgets.QFileDialog.AnyFile)
            dlg.setNameFilter("Text Files (*.txt)")
            filePath, _ = dlg.getOpenFileName()
            if filePath:
                self.obj.read_from_file(filePath)
            self.display_obj()

        except Exception as err:
            self.display_error(err)

    def output_to_file(self):
        try:
            dlg = QtWidgets.QFileDialog()
            dlg.setFileMode(QtWidgets.QFileDialog.AnyFile)
            dlg.setNameFilter("Text Files (*.txt)")
            filePath, _ = dlg.getSaveFileName()
            self.obj.save_to_file(filePath)
        except Exception as err:
            self.display_error(err)

    def randomize(self):
        try:
            if isinstance(self.obj, Matrix):
                if self.textEdit_2.isVisible():
                    rows_count = int(self.textEdit.toPlainText())
                    columns_count = int(self.textEdit_2.toPlainText())
                else:
                    rows_count = int(self.textEdit.toPlainText())
                    columns_count = 1
                self.obj.randomize_matrix(rows_count, columns_count)
                self.display_obj()
        except Exception as err:
            self.display_error(err)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1081, 745)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(0, 0, 121, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.open_coefs_matrix_ui)

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(130, 0, 121, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.open_bs_vector_ui)

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(260, 0, 121, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.open_slar_ui)

        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(30, 120, 161, 41))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.input_from_file)

        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(30, 210, 161, 41))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.output_to_file)

        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(530, 120, 441, 361))
        self.tableView.setObjectName("tableView")

        self.tableView_2 = QtWidgets.QTableView(self.centralwidget)
        self.tableView_2.setGeometry(QtCore.QRect(530, 120, 80, 361))
        self.tableView_2.setObjectName("tableView_2")

        self.matrix_table_view = QtWidgets.QTableView(self.centralwidget)
        self.matrix_table_view.setGeometry(QtCore.QRect(100, 120, 400, 350))
        self.matrix_table_view.setObjectName("matrix_table_view")

        self.xs_vector_view = QtWidgets.QTableView(self.centralwidget)
        self.xs_vector_view.setGeometry(QtCore.QRect(550, 120, 80, 361))
        self.xs_vector_view.setObjectName("xs_vector_view")

        self.bs_matrix_view = QtWidgets.QTableView(self.centralwidget)
        self.bs_matrix_view.setGeometry(QtCore.QRect(700, 120, 80, 361))
        self.bs_matrix_view.setObjectName("bs_matrix_view")

        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(30, 340, 161, 41))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.randomize)

        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(180, 390, 41, 31))
        self.textEdit.setObjectName("textEdit")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 400, 111, 20))
        self.label.setObjectName("label")

        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(180, 440, 41, 31))
        self.textEdit_2.setObjectName("textEdit_2")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(30, 450, 121, 20))
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1081, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.make_all_invisible()
        self.open_coefs_matrix_ui()

    def make_all_invisible(self):
        # self.pushButton.setVisible(False)
        # self.pushButton_2.setVisible(False)
        # self.pushButton_3.setVisible(False)
        self.pushButton_4.setVisible(False)
        self.pushButton_5.setVisible(False)
        self.pushButton_6.setVisible(False)

        self.tableView.setVisible(False)
        self.tableView_2.setVisible(False)
        self.matrix_table_view.setVisible(False)
        self.bs_matrix_view.setVisible(False)
        self.xs_vector_view.setVisible(False)

        self.textEdit.setVisible(False)
        self.textEdit.setPlainText('')
        self.textEdit_2.setVisible(False)
        self.textEdit_2.setPlainText('')

        self.label.setVisible(False)
        self.label_2.setVisible(False)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Matrix"))
        self.pushButton_2.setText(_translate("MainWindow", "Bs Matrix"))
        self.pushButton_3.setText(_translate("MainWindow", "SLAR"))
        self.pushButton_5.setText(_translate("MainWindow", "Input from file"))
        self.pushButton_6.setText(_translate("MainWindow", "Output to file"))
        self.pushButton_4.setText(_translate("MainWindow", "Randomize"))
        self.label.setText(_translate("MainWindow", "Input rows count:"))
        self.label_2.setText(_translate("MainWindow", "Input columns count:"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    # ui.make_all_invisible()
    MainWindow.show()
    sys.exit(app.exec_())
